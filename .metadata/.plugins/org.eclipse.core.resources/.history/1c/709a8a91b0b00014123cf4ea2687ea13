import java.net.*;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.HashMap;
import java.util.Random;
import java.io.*;

public class serverTCP {
	
	private static HashMap<String, String> map = new HashMap<String, String>();
	private static final int BUFSIZE = 64;
	private static String hash = "";
	private static String user = "";
	private static boolean dPrint = false;
	private static InputStream in;
	private static byte[] byteBuffer;
	
	/**
	 * Creates a cryptographic string to be sent to client to compute the MD5 hash
	 * @return String returns cryptographic nonce
	 */
	public static String nonceCreation(){
		Random rand = new Random();
		int size = 63;
		char data = ' ';
		String nonce = "";

		for (int i=0; i<=size; i++) {
		  data = (char)(rand.nextInt(25)+97);
		  nonce = data + nonce;
		}

		return nonce;
	}
	
	/**
	 * Test MD5 digest computation
	 * !!! Borrowed code from link provided in assignment description !!!
	 * @author Roedy Green
	 * @version 1.0
	 * @since 2004-06-07
	 */
	public static byte[] MD5(String user, String pass, String nonce) throws NoSuchAlgorithmException, UnsupportedEncodingException{
		String concat = user+pass+nonce;
		byte[] theTextToDigestAsBytes = concat.getBytes("UTF-8");
		MessageDigest md= MessageDigest.getInstance("MD5");
		md.update(theTextToDigestAsBytes);
		byte[] digest= md.digest();
		return digest;
	}
	
	/**
	 * Takes the input stream of the username and hash generated by the client and recreates the hash
	 * based on the password stored in the server for the username.
	 * @param byteBuffer
	 * @param nonce
	 * @return byte[] of the hash generated by the server given the username provided by the client
	 */
	public static byte[] testUserHash(byte[] byteBuffer, String nonce){
		String userHash = new String(byteBuffer);
		
		user = "";
		hash = "";
		for(int i =0; i < userHash.length(); i++){
			if(userHash.charAt(i) == '*'){
				user = userHash.substring(0, i);
				hash = userHash.substring(i+1);
				break;
			}
		}
		
		byte[] test = null;
		try {
			test = MD5(user, map.get(user), nonce);
		} catch (NoSuchAlgorithmException e) {
			System.out.println("Algorithm Exception: Problem computing the hash, exiting the program");
			System.exit(0);
		} catch (UnsupportedEncodingException e) {
			System.out.println(e);
			System.exit(0);
		}
		return test;
	}
	
	/**
	 * Takes the command line input to set up the server and accept client requests. Evaluates client authentication
	 * requests, username & password with MD5 hash, and sends a resulting authentication response.
	 * @param args parameters included in the command line. 
	 * @throws IOException 
	 */
	public static void main(String[] args){
		
		/**
		 * Sets up the hashmap of the three predefined users that will be refernced later to verify the user
		 */
		map.put("user", "pass");
		map.put("George", "Burdell");
		map.put("GT", "2015");
		
		/**
		 * Parses the input from the command line and binds the server socket to the port defined in the input
		 */
		try{
			if(args.length < 1 || args.length > 2){
				throw new IllegalArgumentException("Parameters:[<port>] <-d(optional>");
			}
		}
		catch(IllegalArgumentException e){
			System.out.println("Error: Invalid Parameters:[<port>] <-d(optional)>, Please try again");
			System.exit(0);
		}
		
		if(args.length == 2){
			String debug = args[1];
			if(debug.charAt(0)=='-' && debug.charAt(1)=='d' && debug.length()==2){
				dPrint = true;
			}
			else{
				System.out.println("Invalid debug parameter, please try again");
				System.out.println("Exiting...");
				System.exit(0);
			}
		}
		
		int serverPort = Integer.parseInt(args[0]);
		ServerSocket servSocket = null;
		try{
			servSocket = new ServerSocket(serverPort);
		}
		catch(Exception e){
			System.out.println("Problem opening Server Socket to port:"+serverPort);
			System.out.println(e);
			System.exit(0);
		}
		System.out.println("Started new server");
		byteBuffer = new byte[BUFSIZE];
		
		/**
		 * Handles the data transmission between the client and the server. Runs indefinitely. 
		 */
		for(;;){
			System.out.println("Waiting for client");
			Socket clientSocket = null;
			try {
				clientSocket = servSocket.accept();
			} catch (IOException e) {
				System.out.println("I/O Channel wasn't properly opened.");
				System.out.println(e);
				System.exit(0);
			}
			System.out.println("Handling client at "+clientSocket.getInetAddress()+" on port "+clientSocket.getPort());
			
			/**
			 * Sets up input & output streasms to send data later in the function
			 */
			in = null;
			OutputStream out = null;
			try{
				in = clientSocket.getInputStream();
				out = clientSocket.getOutputStream();
			}
			catch(Exception e){
				System.out.println("Problem opening I/O Stream for client allocated socket");
				System.out.println(e);
				System.exit(0);
			}
			
			/**
			 * Reads in the authentication request here
			 */
			String input = "";
			try{
				in.read(byteBuffer, 0 ,1);
				input = new String(byteBuffer).substring(0,1);
				if(!input.equals("Y")){
					out.write("Access to Server Denied".getBytes());
					System.out.println("Improper Authorization Request: Closing Connection with Client");
					clientSocket.close();
					continue;
				}
			}
			catch(Exception e){
				System.out.println("Problem with I/O Stream for client allocated socket");
				System.out.println(e);
				System.exit(0);
			}
			if(dPrint){
				System.out.println("Authentication Request Received From Client:" + input);
			}
			
			/**
			 * Sends cryptographic nonce to the client here
			 */
			String nonce = nonceCreation();
			try{
				out.write(nonce.getBytes());
			}
			catch(Exception e){
				System.out.println("Problem sending nonce to client");
				System.out.println(e);
				System.exit(0);
			}
			
			if(dPrint){
				System.out.println("Nonce sent to client:"+nonce);
			}
			
			/**
			 * Reads in the Username & Hash bytestream here
			 */
			byteBuffer = new byte[BUFSIZE];
			try{
				in.read(byteBuffer);
			}
			catch(Exception e){
				System.out.println("Problem reading Username & Hash from client");
				System.out.println(e);
				System.exit(0);
			}
			
			/**
			 * Computes the hash from the server side
			 */
			byte[] test = testUserHash(byteBuffer, nonce);
			
			if(dPrint){
				System.out.println("Computed Hash from Username:"+new String(test));
				System.out.println("  Hash Received from Client:"+hash);
				System.out.println("Username Received from Client:"+user);
			}
			
			/**
			 * Compares the generate hash from the server to the hash sent by the client to the server
			 * Sends the appropriate response based on the result
			 */
			try{
				if((new String(test).trim()).equals(hash.trim())){
					System.out.println("Client Authorized");
					out.write("Welcome to our service".getBytes());
					clientSocket.close();
				}
				else{
					out.write("Access to Server Denied".getBytes());
					System.out.println("User authorization failed.");
					clientSocket.close();
				}
			}
			catch(Exception e){
				System.out.println("Problem with I/O Stream when sending authentication response to client");
				System.out.println(e);
				System.exit(0);
			}
		}
	}
}