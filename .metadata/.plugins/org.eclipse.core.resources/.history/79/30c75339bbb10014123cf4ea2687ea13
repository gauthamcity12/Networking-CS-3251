import java.net.*;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.io.*;

public class letmeinUDP {
	private static final int TIMEOUT = 3000; // TIMEOUT in 3 seconds
	private static final int MAXTRIES = 5;
	private static DatagramSocket socket = null;
	private static InetAddress serverAddress = null;
	private static byte[] user = null;
	private static byte[] pass = null;
	private static String debug = "";
	private static boolean dPrint = false;
	private static DatagramPacket sendPacket = null;
	private static DatagramPacket rcvPacket = null;
	private static final int MAX = 255;
	private static int serverPort;
	
	/**
	 * Concatenates the username and hash together and sends to the server in response to the cryptographic nonce
	 * @param hash byt[] of the MD5 hash generated using the username & password
	 * @return DatagramPacket that indicates whether the authentication succeeded or not
	 */
	public static DatagramPacket challengeResponse(byte[] hash){
		String auth = new String(user)+"*"+new String(hash);
		if(dPrint){
			System.out.println("sending this hash to the server:"+ new String(hash));
			System.out.println("sending this username to the server:"+new String(user));
		}
		DatagramPacket result = null;
		try {
			result = sendrecv(auth.getBytes("UTF-8"), serverAddress, serverPort, socket);
		} catch (UnsupportedEncodingException e) {
			System.out.println(e);
			System.exit(0);
		}
		return result;
	}
	
	/**
	 * This function sends the authentication request to the server.
	 * @param auth the authentication request character that is sent to the server
	 * @return the result of the request: either the nonce or a failure message
	 */
	public static DatagramPacket authReq(String auth){
		if(dPrint)
			System.out.println("Sending authentication request to server:"+serverAddress+":"+serverPort);
		DatagramPacket result = null;
		try {
			result = sendrecv(auth.getBytes("UTF-8"), serverAddress, serverPort, socket);
		} catch (UnsupportedEncodingException e) {
			System.out.println(e);
			System.exit(0);
		}
		return result;
	}
	
	/**
	 * This function goes about sending data between the client and the server. It will attempt to send data
	 * 5 times if a connection hasn't been established at first. It will only quit and timeout after doing so.
	 * @param data The bytestream being sent to the server
	 * @param serverAdd Address of the server
	 * @param serverPort Port of the server
	 * @param socket The socket that is transferring the data. 
	 * @return
	 */
	public static DatagramPacket sendrecv(byte[] data, InetAddress serverAdd, int serverPort, DatagramSocket socket){
		sendPacket = new DatagramPacket(data, data.length, serverAddress, serverPort);
		rcvPacket = new DatagramPacket(new byte[MAX], MAX);
		
		int tries = 0;
		boolean gotResponse = false;
		
		do{
			try{
				socket.send(sendPacket);
				socket.receive(rcvPacket);
				if (!rcvPacket.getAddress().equals(serverAddress)) {
					throw new IOException("Received packet from an unknown source");
				}
				gotResponse = true;
			}
			catch(InterruptedIOException e){
				tries += 1;
				System.out.println("Timed out, " + (MAXTRIES - tries) + " more tries...") ;
			}
			catch(Exception e){
				System.out.println(e);
				System.exit(0);
			}
		}	while((!gotResponse) && tries < MAXTRIES);
		
		if(gotResponse){
			return rcvPacket;
		}
		else{
			System. out.println("No response -- giving up.");
			System.exit(0);
			return null;
		}
	}
	
	/**
	 * Test MD5 digest computation
	 * !!! Borrowed code from link provided in assignment description !!!
	 * @author Roedy Green
	 * @version 1.0
	 * @since 2004-06-07
	 */
	public static byte[] MD5(String user, String password, String nonce) throws NoSuchAlgorithmException, UnsupportedEncodingException{
		String concat = user+password+nonce;
		byte[] theTextToDigestAsBytes = concat.getBytes("8859_1");
		MessageDigest md= MessageDigest.getInstance("MD5");
		md.update(theTextToDigestAsBytes);
		byte[] digest= md.digest();
		return digest;
	}
	
	/**
	 * The driver for the client side of the UDP application. Calls the helper functions to communicate with
	 * the server when sending and receiving data.
	 * @param args
	 */
	public static void main(String[] args){
		try{	
			if((args.length < 3)||(args.length > 4)){
				throw new IllegalArgumentException("Parameters: <server:[port]> <username> <password> <-d(optional)>");
			}
			CharSequence ast = "*";
			if(args[1].contains(ast)){
				throw new Exception("Username cannot contain *");
			}
		}
		catch(IllegalArgumentException e){
			System.out.println("Error: Invalid Parameters: <server:[port]> <username> <password> <-d(optional)>, Please try again");
			System.exit(0);
		} 
		catch(Exception e) {
			System.out.println(e);
			System.exit(0);
		}
		
		/**
		 * Parses command line arguments after confirming that the input is valid. 
		 */
		String[] params = args[0].split(":");
		serverPort = 7; // Default port number
		try{
			serverPort = Integer.parseInt(params[1]);
		}
		catch(Exception e){
			System.out.println("Invalid Argument: Must Include ':' between Server & Port #. Please try again.");
			System.exit(0);
		}
		
		try {
			serverAddress = InetAddress.getByName(params[0]);
			user = args[1].getBytes("UTF-8");
			pass = args[2].getBytes("UTF-8");
		} catch (UnsupportedEncodingException e1) {
			System.out.println(e1);
			System.exit(0);
		} catch (UnknownHostException e) {
			System.out.println(e);
			System.exit(0);
		} 
		
		if(args.length == 4){
			debug = args[3];
			if(debug.charAt(0)=='-' && debug.charAt(1)=='d' && debug.length()==2){
				dPrint = true;
			}
			else{
				System.out.println("Invalid debug parameter, please try again");
				System.out.println("Exiting...");
				System.exit(0);
			}
		}
		
		//
		try {
			socket = new DatagramSocket();
			socket.setSoTimeout(TIMEOUT); 
		} catch (SocketException e) {
			System.out.println("Unable to establish socket connection");
			System.out.println(e);
			System.exit(0);
		}
		
		DatagramPacket result = authReq("Y");
		
		/**
		 * Sends the MD5 hash and username to the server to be verified and gain access to the server
		 */
		byte[] hash = null;
		try {
			if(dPrint)
				System.out.println("Received this cryptographic nonce from the server:"+ new String(result.getData()));
			hash = MD5(new String(user).trim(), new String(pass).trim(), new String(result.getData()).trim());
		} catch (NoSuchAlgorithmException e) {
			System.out.println("Algorithm Exception: Problem computing the hash, exiting the program");
			System.exit(0);
		} catch (UnsupportedEncodingException e) {
			System.out.println(e);
			System.exit(0);
		}
		result = challengeResponse(hash);
		System.out.println(new String(result.getData()));
		socket.close();
		
	}
}
