import java.net.*;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.Timer;
import java.util.TimerTask;
import java.io.*;

public class TCPClient {
	private static byte[] user;
	private static byte[] pass;
	private static byte[] nonce = new byte[64];
	private static Socket socket;
	private static InputStream in;
	private static OutputStream out;
	private static String debug;
	private static boolean dPrint = false;
	private static int counter = 0;
	private static boolean challFailed = false;
	
	public static void connRequest(byte[] user, byte[] pass, String server, int serverPort) throws IOException{
		try {
			socket = new Socket(server, serverPort);
		} catch (UnknownHostException e) {
			System.out.println("Uknown Host: IP address of server could not be determined. Please try again");
			//e.printStackTrace();
			System.exit(0);
		} catch (IOException e) {
			System.out.println("IO Exception: I/O Channel could not opened. Please Try Again.");
			//e.printStackTrace();
			System.exit(0);
		}
		//System.out.println("Connected to Server... Sending Authorization Request");
		
		in = socket.getInputStream();
		out = socket.getOutputStream();
		
		out.write("Y".getBytes()); // Authentication Request
		if(dPrint){
			System.out.println("Sending authentication requestion to server:"+server+":"+serverPort);
		}
	
	}
	/**
	 * Test MD5 digest computation
	 *
	 * @author Roedy Green
	 * @version 1.0
	 * @since 2004-06-07
	 */
	public static byte[] MD5(String user, String password, String nonce) throws NoSuchAlgorithmException, UnsupportedEncodingException{
		String concat = user+password+nonce;
		byte[] theTextToDigestAsBytes = concat.getBytes("UTF-8");
		MessageDigest md= MessageDigest.getInstance("MD5");
		md.update(theTextToDigestAsBytes);
		byte[] digest= md.digest();
		return digest;
	}
	public static void main(String[] args) throws IOException{
		if((args.length < 3)||(args.length > 4)){
			throw new IllegalArgumentException("Parameters: <server:[port]> <username> <password> <-d(optional)>");
		}
		
		// Socket Initialization Info
		String[] params = args[0].split(":");
		String server = params[0];
		int serverPort = 7; // Default port number
		try{
			serverPort = Integer.parseInt(params[1]);
		}
		catch(Exception e){
			System.out.println("Invalid Argument: Must Include ':' between Server & Port #. Please try again.");
			System.exit(0);
		}
		
		user = args[1].getBytes();
		pass = args[2].getBytes();
		if(args.length == 4){
			debug = args[3];
			if(debug.charAt(1)=='d' && debug.charAt(0)=='-' && debug.length()==2){
				dPrint = true;
			}
			else{
				System.out.println("Invalid debug parameter, please try again");
				System.out.println("Exiting...");
				System.exit(0);
			}
		}
		
		
		
		// Socket Initialization Info
		
		connRequest(user, pass, server, serverPort);
		
		in.read(nonce);
		
//		int delay = 5000; // delay for 5 sec.
//		int period = 1000; // repeat every sec.
//		challFailed = false;
//		Timer timer = new Timer();
//		counter = 0;
//	    timer.schedule(new TimerTask()
//	      {
//	        public void run()
//	        {
//	          System.out.println("Waiting..");
//	          try {
//				in.read(nonce);
//				if(!nonce.equals(new byte[64])){
//					timer.cancel();
//					timer.purge();
//				}
//				else{
//					counter++;
//					if(dPrint){
//						System.out.println("Haven't Receive Challenge Response Yet.");
//					}
//				}
//				if(counter > 5){
//					System.out.println("Client is Unresponsive. Authentication Challenge Note Completed. Closing Connection.");
//					timer.cancel();
//					timer.purge();
//					socket.close();
//					challFailed = true;
//					
//				}
//			} catch (IOException e) {
//				// TODO Auto-generated catch block
//				System.out.println(e);
//			}
//	        }
//	      }, delay, period);
//	    
//	    if(challFailed){
//	    	socket.close();
//	    	System.exit(0);
//	    }
//	    timer.cancel();
//		timer.purge();
		
		if("Access to Server Denied".trim().equals(new String(nonce).trim())){
			System.out.println("Acess to Server Denied");
			System.exit(0);
		}
		if(dPrint){
			System.out.println("Received this cryptographic nonce:"+ new String(nonce));
		}
		
		
		// CREATE MD5 HASH 
		byte[] hash = null;
		try {
			hash = MD5(new String(user), new String(pass), new String(nonce));
		} catch (NoSuchAlgorithmException e) {
			System.out.println("Algorithm Exception: Problem computing the hash, exiting the program");
			System.exit(0);
		} 
		
		if(dPrint){
			System.out.println("send this hash to the server:"+ new String(hash));
			System.out.println("sending this username to the server:"+new String(user));
		}
		
		////////// Plain text username and hash sent
		String auth = new String(user) + "*" + new String(hash);
		//System.out.println("User+Hash:" + auth);
		byte[] trans = auth.getBytes();
		byte[] result = new byte[32];
		out.write(trans);
		
		////// Result of sending username + Hash to server
		in.read(result);
		System.out.println((new String(result)).trim());
		socket.close();
	}
}
